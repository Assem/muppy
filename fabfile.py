# coding: utf8
from fabric.api import *
from fabric.contrib.files import upload_template, exists, sed
from fabric.colors import *
import ConfigParser
import requests

__version__ = '0.1 alpha'

# TODO: Installation JasperReport Server


if not env.get('config_file', False):
    print blue("Launching muppy version %s" % __version__)
    print ""
    print red("ERROR: config_file parameter is mandatory.")
    print red("Please launch with:")
    print red("  fab --set config_file=your_file.cfg")
    print 
    exit(0)


config_parser = ConfigParser.ConfigParser()
config_parser.readfp(open(env.config_file))
if config_parser.has_option('env', 'hosts'):
    env.hosts = config_parser.get('env', 'hosts').split(',')
env.root_user = config_parser.get('env', 'root_user')
env.root_password = config_parser.get('env', 'root_password')
env.adm_user = config_parser.get('env', 'adm_user')
env.adm_password = config_parser.get('env', 'adm_password')
env.pg_user = config_parser.get('env', 'pg_user')
env.pg_password = config_parser.get('env', 'pg_password')
env.system_suffix = config_parser.get('env', 'system_suffix')
env.customer_directory = config_parser.get('env', 'customer_directory')
env.openerp_admin_password = config_parser.get('env', 'openerp_admin_password')
env.addons_list = config_parser.get('env', 'addons_list')


class _invisible:
    pass

class bitbucket:
    pass

if config_parser.has_section('bitbucket'):
    bitbucket.protocol = config_parser.get('bitbucket', 'protocol') 
    bitbucket.user = config_parser.get('bitbucket', 'user')
    bitbucket.password = config_parser.get('bitbucket', 'password')

    bitbucket.appserver_user = config_parser.get('bitbucket', 'appserver_user')    
    bitbucket.appserver_repository = config_parser.get('bitbucket', 'appserver_repository')

    bitbucket.other_private_repositories = config_parser.get('bitbucket', 'other_private_repositories').split(',')
else:
    print red("Error: [bitbucket] configuration missing in fabfile.cfg")
    exit(-1)


def ping(root_user=env.root_user, root_password=env.root_password):
    """
    Test a run ls then a sudo ls
    """
    env.user = root_user
    env.password = root_password
    run("ls /") 
    sudo("ls /")   
    return


#
# Postgres Installation
#
def pg_install_server(root_user=env.root_user, root_password=env.root_password):
    """
    Install Postgresql Server and CLI Client (run as root_user)
    """
    env.user = root_user
    env.password = root_password
    sudo('apt-get update --fix-missing')
    sudo('apt-get install -y vim gcc python-setuptools postgresql graphviz postgresql-client libyaml-0-2')
    print green("PosgreSQL server and client installed.")


def pg_create_openerp_user(pg_user=env.pg_user, pg_password=env.pg_password):
    """
    Create a Postgres User for OpenERP Server (run as root_user)
    """
    env.user = env.root_user
    env.password = env.root_password
    sudo( """su postgres -c 'echo "CREATE ROLE %s WITH LOGIN SUPERUSER CREATEDB NOCREATEROLE ENCRYPTED PASSWORD '"'"'%s'"'"' ;" | psql ' """ % (pg_user, pg_password) )
    print green("PosgreSQL %s user created." % pg_user)


def pg_allow_remote_access_for_EVERYONE():
    """
    Configure Postgres to allow remote network connection. WARNING Security Risk (run as root_user)
    """
    env.user = env.root_user
    env.password = env.root_password

    # TODO check ubuntu version
    # TODO check postgres version 
    sudo("""su postgres -c 'echo "# Generated by muppy">> /etc/postgresql/9.1/main/postgresql.conf'""")
    sudo("""su postgres -c 'echo "listen_addresses = '"'"'*'"'"' ">> /etc/postgresql/9.1/main/postgresql.conf'""")

    sudo("""su postgres -c 'echo "# Generated by muppy" >> /etc/postgresql/9.1/main/pg_hba.conf'""")
    sudo("""su postgres -c 'echo "host     all             all             0.0.0.0/0               md5" >> /etc/postgresql/9.1/main/pg_hba.conf'""")
    sudo("service postgresql restart")
    print green("PosgreSQL is now reachable from remote network.")


def pg_install_db_server(pg_user=env.pg_user, pg_password=env.pg_password):
    """
    Install PostgreSQL server then create database user 
    """
    # TODO: check ubuntu version
    pg_install_server()
    pg_create_openerp_user(pg_user=pg_user, pg_password=pg_password)


#
# Installation des VMware Tools
#
def sys_install_vmware_tools(root_user=env.root_user, root_password=env.root_password):
    """
	Install VMWare Tools (run as root_user)
    Right now this requires the tools ISO to be mounted.
    """
    env.user = root_user
    env.password = root_password

    # TODO: Test for Hypervisor Version, download tools, install them then clean

    print
    print red("Installation des VMware Tools")
    print
    print red("  Avant de continuer assurez vous que le CDROM des VWware Tools est prêt à être monté (mais ne le montez pas).")
    print
    raw_input("  Appuyer sur Entrée pour continuer ou CTRL-C pour sortir ?")
    sudo('mkdir -p /mnt/cdrom')
    sudo('mount /dev/cdrom /mnt/cdrom')
    sudo('cp /mnt/cdrom/VM* ~')
    sudo('tar -zxf VM*')
    sudo('apt-get install -y linux-headers-server build-essential')
    sudo('cd vmware-tools-distrib && ./vmware-install.pl -d')


def sys_update_upgrade():
    """
    Update and upgrade system (run as root_user)
    """
    env.user = env.root_user
    env.password = env.root_password
    
    sudo("apt-get update")
    sudo("apt-get upgrade -y")
    print green("System updated and upgraded")


def sys_install_openerp_prerequisites(root_user=env.root_user, root_password=env.root_password):
    """
    Install all ubuntu packages required for OpenERP Server (run as root_user)
    """

    env.user = root_user
    env.password = root_password

    sudo("apt-get install -y python-dev")
    sudo("apt-get install -y libldap2-dev libxslt1-dev libsasl2-dev libjpeg62 libjpeg62-dev libfreetype6-dev liblcms2-dev liblcms1-dev")
    sudo("apt-get install -y postgresql-client libpq-dev python-psycopg2")
    sudo("apt-get install -y python-markupsafe python-imaging python-libxml2 python-dateutil python-feedparser python-gdata python-ldap python-libxslt1 python-lxml python-mako python-openid python-pybabel python-pychart python-pydot python-pyparsing python-reportlab python-simplejson python-vatnumber python-vobject python-tz python-webdav python-werkzeug python-yaml python-xlwt python-zsi")
    sudo("apt-get install -y bzr python-bzrlib mercurial git python-virtualenv python-pip vim")
    sudo("apt-get install -y htop")
    print green("OpenERP prerequisites installed.")


def sys_create_openerp_user(root_user=env.root_user, root_password=env.root_password, phase_1=True):
    """
    Create openerp admin (non root) user (run as root_user)
    """
    env.user = root_user
    env.password = root_password

    # We create the user
    if phase_1:
        #sudo("useradd -m -s /bin/bash -g sudo %s" % (env.adm_user,))
        #sudo("useradd -m -s /bin/bash --system --group openerp %s" % (env.adm_user,))
        sudo("useradd -m -s /bin/bash --system %s" % (env.adm_user,))
        sudo("echo \"%s:%s\" > pw.tmp" % (env.adm_user, env.adm_password,))
        sudo("sudo chpasswd < pw.tmp")
        sudo("rm pw.tmp")
        print green("User \"%s\" created." % env.adm_user)


    if True:
        # we generate a ssh key and package it 
        env.user = env.adm_user
        env.password = env.adm_password
        run("ssh-keygen -t rsa -N \"\" -f ~/.ssh/id_rsa")
        # TODO: use a ./tmp directory to store working files
        get('/home/%s/.ssh/id_rsa.pub' % (env.adm_user,), 'ssh_keys_temp/%s_id_rsa.pub' % (env.adm_user,))

        ssh_key_file = open('ssh_keys_temp/%s_id_rsa.pub' % (env.adm_user,))
        data = {
            'label': 'muppet:%s@%s' % (env.adm_user, env.host,),
            'key': ssh_key_file.read()
        }

    if True:
        # we upload the to bitbucket.org as a deployment (readonly) key on the app-server repository
        # TODO: test if key exists before generating a new one or delete existing keys
        res = requests.post("https://api.bitbucket.org/1.0/repositories/%s/%s/deploy-keys/" % (bitbucket.appserver_user, bitbucket.appserver_repository,),
                            auth=(bitbucket.user, bitbucket.password),
                            data=data)
        assert res.status_code == requests.codes.ok, "Error: Unable to upload deployment key to bitbucket.org"
        print green("Deployment key (%s) successfully generated and uploaded to bitbucket." % data['label'])

    if True:
        # Now we upload the key to all others private repos
        # TODO: Infer this list from the buildout.cfg addons key 
        for repo in bitbucket.other_private_repositories:
            if repo:
                user, repository = repo.split('/')
                if user and repository:
                    res = requests.post("https://api.bitbucket.org/1.0/repositories/%s/%s/deploy-keys/" % (user, repository,),
                                        auth=(bitbucket.user, bitbucket.password),
                                        data=data)
                    assert res.status_code == requests.codes.ok, "Error: Unable to upload deployment key to bitbucket.org"
                    print green("Deployment key (%s) successfully uploaded to repository :%s" % (data['label'], repository))
                else:
                    print red("%s is not a valid repository name!" % repo)

def sys_create_directories(root_user=env.root_user, root_password=env.root_password):
    """
    We create:
      -- the customer directory (/opt/openerp/<customer>) that will hold all subprojects related to 
      this server.
      -- the openerp log dirextory

    We grant rights only to adm_user (run as root_user)
    """
    env.user = root_user
    env.password = root_password

    customer_path = "/opt/openerp/%s" % (env.customer_directory,)
    sudo("mkdir -p %s" % (customer_path,))
    sudo("chmod 755 %s" % (customer_path,))     
    sudo("chown -R %s: %s" % (env.adm_user, customer_path,))
    print green("Directory %s created." % customer_path )

    # Now we create openerp log directory
    sudo('mkdir -p /var/log/openerp')
    sudo('chown -R %s:root /var/log/openerp' % (env.adm_user,))
    sudo('chmod 775 /var/log/openerp')
    print green("OpenERP log directory: \"/var/log/openerp/\" created.")

    # TODO: Create an var/run/openerp subdirectory
    # TODO: Create an openerp group that will allow several instances to be deployed


###############################################################################
# OpenERP part
#
def openerp_clone_appserver(adm_user=env.adm_user, adm_password=env.adm_password):
    """
    we clone the app appserver and setup buildout.cfg (run as adm_user)
    """
    def sed_escape(s):
        """
        utility to preserve password special characters during sed(ing) of buildout.cfg"
        """
        t1 = s.replace("\\", "\\\\")
        t2 = t1.replace("/", "\\/")
        t3 = t2.replace("&", "\&")
        return t3

    env.user = adm_user
    env.password = adm_password

    # On ajoute la clef SSH de bitbucket dans les known_hosts
    if bitbucket.protocol=='ssh':
        if exists("~/.ssh/known_hosts"):
            run("ssh-keygen -R bitbucket.org")
        run("ssh-keyscan -t rsa bitbucket.org >> ~/.ssh/known_hosts")

    # we clone the appserver repo after removing it if it exists.
    customer_path = "/opt/openerp/%s" % (env.customer_directory,)
    repository_path = "%s/%s" % (customer_path, bitbucket.appserver_repository,) 
    if exists(repository_path):
        run("rm -rf %s" % (repository_path,))

    if bitbucket.protocol == 'ssh':
        run("hg clone -y ssh://hg@bitbucket.org/%s/%s %s" % (bitbucket.appserver_user, bitbucket.appserver_repository, repository_path,))
    else:
        run("hg clone -y https://%s:%s@bitbucket.org/%s/%s %s" % (bitbucket.user, bitbucket.password, bitbucket.appserver_user, bitbucket.appserver_repository, repository_path,))

    # we create buildout.cfg by copying template
    buildout_cfg_path = "%s/buildout.cfg" % (repository_path, )
    run("cp %s.template %s" % (buildout_cfg_path, buildout_cfg_path,))
    # we adjust buildout.cfg content
    sed(buildout_cfg_path, "\{\{pg_user\}\}", sed_escape(env.pg_user))
    sed(buildout_cfg_path, "\{\{pg_password\}\}", sed_escape(env.pg_password))
    sed(buildout_cfg_path, "\{\{openerp_admin_password\}\}", sed_escape(env.openerp_admin_password))

    print green("Bitbucket repository \"%s\" cloned" % bitbucket.appserver_repository)
    return


def openerp_bootstrap_appserver(adm_user=env.adm_user, adm_password=env.adm_password):
    """
    we launch appserver install.sh (run as adm_user)
    """
    env.user = adm_user
    env.password = adm_password

    customer_path = "/opt/openerp/%s" % (env.customer_directory,)
    appserver_path = '%s/%s/' % (customer_path, bitbucket.appserver_repository, )

    with cd(appserver_path):
        run('./install.sh')
    print green("Appserver installed.")


def openerp_create_services(root_user=env.root_user, root_password=env.root_password):
    """
    We create the openerp service (run as root_user)
    """
    env.user = root_user
    env.password = root_password

    customer_path = "/opt/openerp/%s" % (env.customer_directory,)
    appserver_path = '%s/%s/' % (customer_path, bitbucket.appserver_repository, )

    replace_ctx = {
        'muppy_appserver_path': appserver_path,
        'muppy_adm_user': env.adm_user
    }
    upload_template('scripts/openerp-server', '/etc/init.d/openerp-server', context=replace_ctx, use_sudo=True, backup=True, use_jinja=True)
    upload_template('scripts/gunicorn-openerp', '/etc/init.d/gunicorn-openerp', context=replace_ctx, use_sudo=True, backup=True, use_jinja=True)

    sudo('chmod 755 /etc/init.d/openerp-server')
    sudo('chown %s:root /etc/init.d/openerp-server' % env.adm_user)

    sudo('chmod 755 /etc/init.d/gunicorn-openerp')
    sudo('chown %s:root /etc/init.d/gunicorn-openerp' % env.adm_user)

    sudo('update-rc.d openerp-server defaults')
    print green("OpenERP services created.")


def install_openerp_application_server():
    """
    Install an OpenERP appserver (without database).
    """
    sys_install_openerp_prerequisites()
    sys_create_openerp_user()
    sys_create_directories()

    openerp_clone_appserver()
    openerp_bootstrap_appserver()
    openerp_create_services()
    reboot()


def install_openerp_standalone_server(phase_1=True, phase_2=True, phase_3=True, phase_4=True, phase_5=True, phase_6=True):
    """
    Install a complete OpenERP appserver (including database server).
    """

    #
    # Phase 1 : System upgrade including tools for VM Hypervisor
    if phase_1:
        sys_update_upgrade()  # Warning update on VMware imply to resinstall tools
    
    #
    # Phase 2 : PostgreSQL
    if phase_2:
        pg_install_server()
        pg_create_openerp_user()

    #
    # Phase 3 : System packages
    if phase_3:
        sys_install_openerp_prerequisites()

    #
    # Phase 4 : OpenERP user, and directories (/var/run, /var/log)
    if phase_4:
        sys_create_openerp_user()
        sys_create_directories()

    #
    # Phase 5 : OpenERP user, software and system configuration
    if phase_5:
        openerp_clone_appserver()
        openerp_bootstrap_appserver()
        
    #
    # Phase 6 : Setup init scripts
    if phase_6:
        openerp_create_services()

    reboot()


def stop_openerp_service():
    """
    stop openerp service and preserve fabric active user
    """
    backup_user = env.user
    backup_password = env.password

    env.user = env.root_user
    env.password = env.root_password        
    sudo('/etc/init.d/openerp-server stop')

    env.user = backup_user
    env.password = backup_password 
    print green("openerp-server stopped")


def start_openerp_service():
    """
    start openerp service and preserve fabric active user
    """
    backup_user = env.user
    backup_password = env.password

    env.user = env.root_user
    env.password = env.root_password        
    sudo('/etc/init.d/openerp-server start')

    env.user = backup_user
    env.password = backup_password 
    print green("openerp-server started")


def update_appserver(adm_user=env.adm_user, adm_password=env.adm_password, update_database=None):
    """
    Update all projects (addons) of an appserver with buildout and restart process
    """
    env.user = adm_user
    env.password = adm_password

    appserver_path ="/opt/openerp/%s/%s" % (env.customer_directory, bitbucket.appserver_repository)

    # TODO: identifier le serveur qui tourne (gunicorn or classical openerp)
    # TODO parameters
    print blue("\"Buildouting\" server")
    with cd(appserver_path):

        stop_openerp_service()

        run('bin/buildout')
        # TODO: parameter database and modules
        if update_database and env.addons_list:
            run('bin/start_openerp -d %s -u %s --stop-after-init' % (update_database, env.addons_list,))
            print green("OpenERP server updated:")
            print green("  - modules=%s" % env.addons_list)
            print green("  - database=%s" % update_database)
        else:
            print red("No database update:")
            if not env.addons_list:
                print red("  - missing config for env.addons_list")
            if not update_database:
                print red("  - missing update_database paramater")
    
        start_openerp_service()




